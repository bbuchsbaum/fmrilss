% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/voxel_hrf.R
\name{lss_with_hrf}
\alias{lss_with_hrf}
\title{Perform LSS using Voxel-wise HRFs}
\usage{
lss_with_hrf(
  Y,
  events,
  hrf_estimates,
  nuisance_regs = NULL,
  engine = "R",
  chunk_size = 5000,
  verbose = TRUE,
  backing_dir = NULL
)
}
\arguments{
\item{Y}{Numeric matrix of BOLD data (time x voxels).}

\item{events}{Data frame with \code{onset}, \code{duration} and \code{condition} columns.}

\item{hrf_estimates}{A \link{VoxelHRF} object returned by \code{estimate_voxel_hrf}.}

\item{nuisance_regs}{Optional numeric matrix of nuisance regressors.}

\item{engine}{Computational engine: "R" for pure R implementation (default), 
"C++" for optimized C++ (experimental).}

\item{chunk_size}{Number of voxels to process per batch (C++ engine only).}

\item{verbose}{Logical; display progress bar.}

\item{backing_dir}{Directory for bigmemory backing files. If NULL, a
temporary directory is used (C++ engine only).}
}
\value{
An object of class \link{LSSBeta} for C++ engine, or a numeric matrix
  (n_trials x n_vox) for R engine.
}
\description{
Computes trial-wise beta estimates using voxel-specific HRFs.
}
\examples{
\dontrun{
set.seed(1)
Y <- matrix(rnorm(100), 50, 2)
events <- data.frame(onset = c(5, 25), duration = 1,
                     condition = "A")
basis <- fmrihrf::hrf_gamma()
sframe <- fmrihrf::sampling_frame(blocklens = nrow(Y), TR = 1)
times <- fmrihrf::samples(sframe, global = TRUE)
rset <- fmrihrf::regressor_set(onsets = events$onset,
                               fac = factor(1:nrow(events)),
                               hrf = basis, duration = events$duration,
                               span = 30)
X <- fmrihrf::evaluate(rset, grid = times, precision = 0.1, method = "conv")
coef <- matrix(rnorm(ncol(X) * ncol(Y)), ncol(X), ncol(Y))
Y <- X \%*\% coef + Y * 0.1
est <- estimate_voxel_hrf(Y, events, basis)
betas <- lss_with_hrf(Y, events, est, verbose = FALSE, engine = "R")
dim(betas)
}
}
