% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cpp_exports.R
\name{project_confounds_cpp}
\alias{project_confounds_cpp}
\title{Project Out Confounds Using C++}
\usage{
project_confounds_cpp(X_confounds, Y_data, C_trials)
}
\arguments{
\item{X_confounds}{Confound design matrix (n x k)}

\item{Y_data}{Data matrix (n x V) where V is number of voxels}

\item{C_trials}{Trial design matrix (n x T) where T is number of trials}
}
\value{
List with projected data (residual_data) and projected trials (Q_dmat_ran)
}
\description{
Fast C++ implementation for projecting out confound variables from data and
trial design matrices. This uses Cholesky decomposition for numerical stability
and avoids creating large projection matrices.
}
\details{
This function computes residuals Y - X(X'X)^(-1)X'Y and C - X(X'X)^(-1)X'C
without explicitly forming the projection matrix Q = I - X(X'X)^(-1)X'.
This approach uses ~100x less memory for large n and is numerically more stable.
}
\examples{
\dontrun{
n <- 200; k <- 5; V <- 1000; T <- 50
X_confounds <- cbind(1, 1:n, rnorm(n*3))  # intercept + trend + noise
Y_data <- matrix(rnorm(n*V), n, V)
C_trials <- matrix(rnorm(n*T), n, T)

result <- project_confounds_cpp(X_confounds, Y_data, C_trials)
}

}
