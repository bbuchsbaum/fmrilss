
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fmrilss"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('fmrilss')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("lss")
> ### * lss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lss
> ### Title: Least Squares Separate (LSS) Analysis
> ### Aliases: lss
> 
> ### ** Examples
> 
> # Generate example data
> n_timepoints <- 100
> n_trials <- 10
> n_voxels <- 50
> 
> # Create trial design matrix
> X <- matrix(0, n_timepoints, n_trials)
> for(i in 1:n_trials) {
+   start <- (i-1) * 8 + 1
+   if(start + 5 <= n_timepoints) {
+     X[start:(start+5), i] <- 1
+   }
+ }
> 
> # Create data with some signal
> Y <- matrix(rnorm(n_timepoints * n_voxels), n_timepoints, n_voxels)
> true_betas <- matrix(rnorm(n_trials * n_voxels, 0, 0.5), n_trials, n_voxels)
> for(i in 1:n_trials) {
+   Y <- Y + X[, i] %*% matrix(true_betas[i, ], 1, n_voxels)
+ }
> 
> # Run LSS analysis
> beta_estimates <- lss(Y, X)
> 
> # With fixed effects (intercept + linear trend)
> Z <- cbind(1, scale(1:n_timepoints))
> beta_estimates_with_fixed <- lss(Y, X, Z = Z)
> 
> # With nuisance regression (motion parameters)
> Nuisance <- matrix(rnorm(n_timepoints * 6), n_timepoints, 6)
> beta_estimates_clean <- lss(Y, X, Z = Z, Nuisance = Nuisance)
> 
> 
> 
> 
> cleanEx()
> nameEx("lss_beta_cpp")
> ### * lss_beta_cpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lss_beta_cpp
> ### Title: Vectorized LSS Beta Computation Using C++
> ### Aliases: lss_beta_cpp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # After projecting out confounds
> ##D result <- project_confounds_cpp(X_confounds, Y_data, C_trials)
> ##D betas <- lss_beta_cpp(result$Q_dmat_ran, result$residual_data)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("lss_naive")
> ### * lss_naive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lss_naive
> ### Title: Naive Least Squares Separate (LSS) Analysis
> ### Aliases: lss_naive
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Using same setup as lss() examples
> ##D beta_estimates_naive <- lss_naive(Y = Y, bdes = bdes)
> ##D 
> ##D # Compare with optimized version
> ##D beta_estimates_fast <- lss(Y = Y, bdes = bdes)
> ##D max(abs(beta_estimates_naive - beta_estimates_fast))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("project_confounds")
> ### * project_confounds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: project_confounds
> ### Title: Project Out Confound Variables
> ### Aliases: project_confounds
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create confound matrix (intercept + linear trend)
> ##D n <- 100
> ##D X_confounds <- cbind(1, 1:n)
> ##D 
> ##D # Get projection matrix
> ##D Q <- project_confounds(X_confounds)
> ##D 
> ##D # Apply to data to remove confounds
> ##D Y_clean <- Q %*% Y_raw
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("project_confounds_cpp")
> ### * project_confounds_cpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: project_confounds_cpp
> ### Title: Project Out Confounds Using C++
> ### Aliases: project_confounds_cpp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D n <- 200; k <- 5; V <- 1000; T <- 50
> ##D X_confounds <- cbind(1, 1:n, rnorm(n*3))  # intercept + trend + noise
> ##D Y_data <- matrix(rnorm(n*V), n, V)
> ##D C_trials <- matrix(rnorm(n*T), n, T)
> ##D 
> ##D result <- project_confounds_cpp(X_confounds, Y_data, C_trials)
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.069 0.007 0.084 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
