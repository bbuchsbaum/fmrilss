// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_residuals_cpp
List compute_residuals_cpp(const arma::mat& X, const arma::mat& Y, const arma::mat& C);
RcppExport SEXP _fmrilss_compute_residuals_cpp(SEXP XSEXP, SEXP YSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_residuals_cpp(X, Y, C));
    return rcpp_result_gen;
END_RCPP
}
// lss_compute_cpp
arma::mat lss_compute_cpp(const arma::mat& C, const arma::mat& Y);
RcppExport SEXP _fmrilss_lss_compute_cpp(SEXP CSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(lss_compute_cpp(C, Y));
    return rcpp_result_gen;
END_RCPP
}
// project_confounds_cpp
List project_confounds_cpp(const arma::mat& X_confounds, const arma::mat& Y_data, const arma::mat& C_trials);
RcppExport SEXP _fmrilss_project_confounds_cpp(SEXP X_confoundsSEXP, SEXP Y_dataSEXP, SEXP C_trialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_confounds(X_confoundsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_data(Y_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C_trials(C_trialsSEXP);
    rcpp_result_gen = Rcpp::wrap(project_confounds_cpp(X_confounds, Y_data, C_trials));
    return rcpp_result_gen;
END_RCPP
}
// lss_beta_cpp
arma::mat lss_beta_cpp(const arma::mat& C_projected, const arma::mat& Y_projected);
RcppExport SEXP _fmrilss_lss_beta_cpp(SEXP C_projectedSEXP, SEXP Y_projectedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type C_projected(C_projectedSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_projected(Y_projectedSEXP);
    rcpp_result_gen = Rcpp::wrap(lss_beta_cpp(C_projected, Y_projected));
    return rcpp_result_gen;
END_RCPP
}
// lss_fused_optim_cpp
arma::mat lss_fused_optim_cpp(const arma::mat& X, const arma::mat& Y, const arma::mat& C, int block_size);
RcppExport SEXP _fmrilss_lss_fused_optim_cpp(SEXP XSEXP, SEXP YSEXP, SEXP CSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(lss_fused_optim_cpp(X, Y, C, block_size));
    return rcpp_result_gen;
END_RCPP
}
// lss_engine_vox_hrf_cpp
NumericMatrix lss_engine_vox_hrf_cpp(const NumericMatrix& Y, const NumericMatrix& coeffs, const List& basis_convolved, const NumericMatrix& Z);
RcppExport SEXP _fmrilss_lss_engine_vox_hrf_cpp(SEXP YSEXP, SEXP coeffsSEXP, SEXP basis_convolvedSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type coeffs(coeffsSEXP);
    Rcpp::traits::input_parameter< const List& >::type basis_convolved(basis_convolvedSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(lss_engine_vox_hrf_cpp(Y, coeffs, basis_convolved, Z));
    return rcpp_result_gen;
END_RCPP
}
// mixed_solve_internal
List mixed_solve_internal(NumericVector y_in, Nullable<NumericMatrix> Z_in, Nullable<NumericMatrix> K_in, Nullable<NumericMatrix> X_in, std::string method, NumericVector bounds, bool SE, bool return_Hinv);
RcppExport SEXP _fmrilss_mixed_solve_internal(SEXP y_inSEXP, SEXP Z_inSEXP, SEXP K_inSEXP, SEXP X_inSEXP, SEXP methodSEXP, SEXP boundsSEXP, SEXP SESEXP, SEXP return_HinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_in(y_inSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type Z_in(Z_inSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type K_in(K_inSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type X_in(X_inSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< bool >::type SE(SESEXP);
    Rcpp::traits::input_parameter< bool >::type return_Hinv(return_HinvSEXP);
    rcpp_result_gen = Rcpp::wrap(mixed_solve_internal(y_in, Z_in, K_in, X_in, method, bounds, SE, return_Hinv));
    return rcpp_result_gen;
END_RCPP
}
// mixed_precompute_workspace
List mixed_precompute_workspace(const arma::mat& X, const arma::mat& Z, const arma::mat& K);
RcppExport SEXP _fmrilss_mixed_precompute_workspace(SEXP XSEXP, SEXP ZSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(mixed_precompute_workspace(X, Z, K));
    return rcpp_result_gen;
END_RCPP
}
// mixed_single_voxel_cpp
List mixed_single_voxel_cpp(const arma::vec& y, const List& ws_list, bool compute_se);
RcppExport SEXP _fmrilss_mixed_single_voxel_cpp(SEXP ySEXP, SEXP ws_listSEXP, SEXP compute_seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type ws_list(ws_listSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_se(compute_seSEXP);
    rcpp_result_gen = Rcpp::wrap(mixed_single_voxel_cpp(y, ws_list, compute_se));
    return rcpp_result_gen;
END_RCPP
}
// mixed_multi_voxel_cpp
List mixed_multi_voxel_cpp(const arma::mat& Y, const List& ws_list, bool compute_se, int n_threads);
RcppExport SEXP _fmrilss_mixed_multi_voxel_cpp(SEXP YSEXP, SEXP ws_listSEXP, SEXP compute_seSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const List& >::type ws_list(ws_listSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_se(compute_seSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(mixed_multi_voxel_cpp(Y, ws_list, compute_se, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// oasis_precompute_design
Rcpp::List oasis_precompute_design(const arma::mat& X_trials, const arma::mat& N_nuis);
RcppExport SEXP _fmrilss_oasis_precompute_design(SEXP X_trialsSEXP, SEXP N_nuisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_trials(X_trialsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N_nuis(N_nuisSEXP);
    rcpp_result_gen = Rcpp::wrap(oasis_precompute_design(X_trials, N_nuis));
    return rcpp_result_gen;
END_RCPP
}
// oasis_AtY_SY_blocked
Rcpp::List oasis_AtY_SY_blocked(const arma::mat& A, const arma::vec& s_all, const arma::mat& Q, const arma::mat& Y, const int block_cols);
RcppExport SEXP _fmrilss_oasis_AtY_SY_blocked(SEXP ASEXP, SEXP s_allSEXP, SEXP QSEXP, SEXP YSEXP, SEXP block_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_all(s_allSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type block_cols(block_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(oasis_AtY_SY_blocked(A, s_all, Q, Y, block_cols));
    return rcpp_result_gen;
END_RCPP
}
// oasis_betas_closed_form
arma::mat oasis_betas_closed_form(const arma::mat& N_Y, const arma::rowvec& S_Y, const arma::vec& d, const arma::vec& alpha, const arma::vec& s, const double ridge_x, const double ridge_b, const double denom_eps);
RcppExport SEXP _fmrilss_oasis_betas_closed_form(SEXP N_YSEXP, SEXP S_YSEXP, SEXP dSEXP, SEXP alphaSEXP, SEXP sSEXP, SEXP ridge_xSEXP, SEXP ridge_bSEXP, SEXP denom_epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type N_Y(N_YSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type S_Y(S_YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type ridge_x(ridge_xSEXP);
    Rcpp::traits::input_parameter< const double >::type ridge_b(ridge_bSEXP);
    Rcpp::traits::input_parameter< const double >::type denom_eps(denom_epsSEXP);
    rcpp_result_gen = Rcpp::wrap(oasis_betas_closed_form(N_Y, S_Y, d, alpha, s, ridge_x, ridge_b, denom_eps));
    return rcpp_result_gen;
END_RCPP
}
// oasis_betas_gammas
Rcpp::List oasis_betas_gammas(const arma::mat& N_Y, const arma::rowvec& S_Y, const arma::vec& d, const arma::vec& alpha, const arma::vec& s, const double ridge_x, const double ridge_b, const double denom_eps);
RcppExport SEXP _fmrilss_oasis_betas_gammas(SEXP N_YSEXP, SEXP S_YSEXP, SEXP dSEXP, SEXP alphaSEXP, SEXP sSEXP, SEXP ridge_xSEXP, SEXP ridge_bSEXP, SEXP denom_epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type N_Y(N_YSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type S_Y(S_YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type ridge_x(ridge_xSEXP);
    Rcpp::traits::input_parameter< const double >::type ridge_b(ridge_bSEXP);
    Rcpp::traits::input_parameter< const double >::type denom_eps(denom_epsSEXP);
    rcpp_result_gen = Rcpp::wrap(oasis_betas_gammas(N_Y, S_Y, d, alpha, s, ridge_x, ridge_b, denom_eps));
    return rcpp_result_gen;
END_RCPP
}
// oasisk_precompute_design
Rcpp::List oasisk_precompute_design(const arma::mat& X_trials, const arma::mat& N_nuis, const int K);
RcppExport SEXP _fmrilss_oasisk_precompute_design(SEXP X_trialsSEXP, SEXP N_nuisSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_trials(X_trialsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N_nuis(N_nuisSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(oasisk_precompute_design(X_trials, N_nuis, K));
    return rcpp_result_gen;
END_RCPP
}
// oasisk_products
Rcpp::List oasisk_products(const arma::mat& A, const arma::mat& S, const arma::mat& Q, const arma::mat& Y, const int block_cols);
RcppExport SEXP _fmrilss_oasisk_products(SEXP ASEXP, SEXP SSEXP, SEXP QSEXP, SEXP YSEXP, SEXP block_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type block_cols(block_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(oasisk_products(A, S, Q, Y, block_cols));
    return rcpp_result_gen;
END_RCPP
}
// oasisk_betas
arma::mat oasisk_betas(const arma::cube& D, const arma::cube& C, const arma::cube& E, const arma::mat& N1, const arma::mat& SY, const double ridge_x, const double ridge_b, const double diag_eps);
RcppExport SEXP _fmrilss_oasisk_betas(SEXP DSEXP, SEXP CSEXP, SEXP ESEXP, SEXP N1SEXP, SEXP SYSEXP, SEXP ridge_xSEXP, SEXP ridge_bSEXP, SEXP diag_epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SY(SYSEXP);
    Rcpp::traits::input_parameter< const double >::type ridge_x(ridge_xSEXP);
    Rcpp::traits::input_parameter< const double >::type ridge_b(ridge_bSEXP);
    Rcpp::traits::input_parameter< const double >::type diag_eps(diag_epsSEXP);
    rcpp_result_gen = Rcpp::wrap(oasisk_betas(D, C, E, N1, SY, ridge_x, ridge_b, diag_eps));
    return rcpp_result_gen;
END_RCPP
}
// oasisk_compute_RY_norm2
arma::vec oasisk_compute_RY_norm2(const arma::mat& Q, const arma::mat& Y);
RcppExport SEXP _fmrilss_oasisk_compute_RY_norm2(SEXP QSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(oasisk_compute_RY_norm2(Q, Y));
    return rcpp_result_gen;
END_RCPP
}
// oasisk_betas_se
Rcpp::List oasisk_betas_se(const arma::cube& D, const arma::cube& C, const arma::cube& E, const arma::mat& N1, const arma::mat& SY, const arma::vec& RY_norm2, double ridge_x, double ridge_b);
RcppExport SEXP _fmrilss_oasisk_betas_se(SEXP DSEXP, SEXP CSEXP, SEXP ESEXP, SEXP N1SEXP, SEXP SYSEXP, SEXP RY_norm2SEXP, SEXP ridge_xSEXP, SEXP ridge_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SY(SYSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type RY_norm2(RY_norm2SEXP);
    Rcpp::traits::input_parameter< double >::type ridge_x(ridge_xSEXP);
    Rcpp::traits::input_parameter< double >::type ridge_b(ridge_bSEXP);
    rcpp_result_gen = Rcpp::wrap(oasisk_betas_se(D, C, E, N1, SY, RY_norm2, ridge_x, ridge_b));
    return rcpp_result_gen;
END_RCPP
}
// estimate_hrf_cpp
arma::mat estimate_hrf_cpp(const arma::mat& X, const arma::mat& Y);
RcppExport SEXP _fmrilss_estimate_hrf_cpp(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_hrf_cpp(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// lss_engine_vox_hrf
void lss_engine_vox_hrf(const arma::mat& Y, const arma::mat& coeffs, const arma::mat& basis_kernels, const arma::uvec& onset_idx, const arma::vec& durations, const arma::mat& nuisance, SEXP betas_ptr, Rcpp::Function progress, const int chunk_size, bool verbose);
RcppExport SEXP _fmrilss_lss_engine_vox_hrf(SEXP YSEXP, SEXP coeffsSEXP, SEXP basis_kernelsSEXP, SEXP onset_idxSEXP, SEXP durationsSEXP, SEXP nuisanceSEXP, SEXP betas_ptrSEXP, SEXP progressSEXP, SEXP chunk_sizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coeffs(coeffsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis_kernels(basis_kernelsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type onset_idx(onset_idxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type durations(durationsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type nuisance(nuisanceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type betas_ptr(betas_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< const int >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    lss_engine_vox_hrf(Y, coeffs, basis_kernels, onset_idx, durations, nuisance, betas_ptr, progress, chunk_size, verbose);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fmrilss_compute_residuals_cpp", (DL_FUNC) &_fmrilss_compute_residuals_cpp, 3},
    {"_fmrilss_lss_compute_cpp", (DL_FUNC) &_fmrilss_lss_compute_cpp, 2},
    {"_fmrilss_project_confounds_cpp", (DL_FUNC) &_fmrilss_project_confounds_cpp, 3},
    {"_fmrilss_lss_beta_cpp", (DL_FUNC) &_fmrilss_lss_beta_cpp, 2},
    {"_fmrilss_lss_fused_optim_cpp", (DL_FUNC) &_fmrilss_lss_fused_optim_cpp, 4},
    {"_fmrilss_lss_engine_vox_hrf_cpp", (DL_FUNC) &_fmrilss_lss_engine_vox_hrf_cpp, 4},
    {"_fmrilss_mixed_solve_internal", (DL_FUNC) &_fmrilss_mixed_solve_internal, 8},
    {"_fmrilss_mixed_precompute_workspace", (DL_FUNC) &_fmrilss_mixed_precompute_workspace, 3},
    {"_fmrilss_mixed_single_voxel_cpp", (DL_FUNC) &_fmrilss_mixed_single_voxel_cpp, 3},
    {"_fmrilss_mixed_multi_voxel_cpp", (DL_FUNC) &_fmrilss_mixed_multi_voxel_cpp, 4},
    {"_fmrilss_oasis_precompute_design", (DL_FUNC) &_fmrilss_oasis_precompute_design, 2},
    {"_fmrilss_oasis_AtY_SY_blocked", (DL_FUNC) &_fmrilss_oasis_AtY_SY_blocked, 5},
    {"_fmrilss_oasis_betas_closed_form", (DL_FUNC) &_fmrilss_oasis_betas_closed_form, 8},
    {"_fmrilss_oasis_betas_gammas", (DL_FUNC) &_fmrilss_oasis_betas_gammas, 8},
    {"_fmrilss_oasisk_precompute_design", (DL_FUNC) &_fmrilss_oasisk_precompute_design, 3},
    {"_fmrilss_oasisk_products", (DL_FUNC) &_fmrilss_oasisk_products, 5},
    {"_fmrilss_oasisk_betas", (DL_FUNC) &_fmrilss_oasisk_betas, 8},
    {"_fmrilss_oasisk_compute_RY_norm2", (DL_FUNC) &_fmrilss_oasisk_compute_RY_norm2, 2},
    {"_fmrilss_oasisk_betas_se", (DL_FUNC) &_fmrilss_oasisk_betas_se, 8},
    {"_fmrilss_estimate_hrf_cpp", (DL_FUNC) &_fmrilss_estimate_hrf_cpp, 2},
    {"_fmrilss_lss_engine_vox_hrf", (DL_FUNC) &_fmrilss_lss_engine_vox_hrf, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_fmrilss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
